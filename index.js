(()=>{function e(o){return 0===o||1===o?o:e(o-1)+e(o-2)}function o(e){const o=e.length,n=e.slice(0,o/2),s=e.slice(o/2,o);return console.log("STARTING UNSORTED ARRAY: "+e),console.log("Left Array (starting split): \n"+n),console.log("Right Array (starting split): \n"+s),l(n,s)}function l(e,o){let s,t,g,i,c,r;if(console.log("passed Left side Array (sort): "+e),console.log("passed Right side Array (sort): "+o),e.length>1)s=e.slice(0,e.length/2),t=e.slice(e.length/2,e.length),c=l(s,t);else{if(!(e.length<=1&&o.length>1))return console.log("LEFT SIDE MERGE RETURNED"),n(e,o);c=e.slice()}if(o.length>1)g=o.slice(0,o.length/2),i=o.slice(o.length/2,o.length),r=l(g,i);else{if(!(o.length<=1&&e.length>1))return console.log("RIGHT SIDE MERGE"),n(e,o);r=o.slice()}return n(c,r)}function n(e,o){const l=[],n=e.slice(),s=o.slice();for(console.log(n),console.log(s);0!==n.length||0!==s.length;){const e=n[0],o=s[0];void 0===e&&void 0!==o?(l.push(o),s.shift()):void 0!==e&&void 0===o?(l.push(e),n.shift()):e>o?(l.push(o),s.shift()):(e<o||e===o)&&(l.push(e),n.shift())}return console.log("Merged Array: "+l),l}console.log("-------------------THIS IS THE START OF FIBONACCI-------------------"),console.log(function(){const o=[];for(let l=8;l>=0;l-=1)o.push(e(l));return o.reverse()}()),console.log("-------------------THIS IS THE START OF MERGE SORT-------------------"),console.log(o([3,2,1,13,8,5,0,1])),console.log(o([105,79,100,110]))})();